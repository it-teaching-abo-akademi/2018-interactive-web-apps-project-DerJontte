{"version":3,"sources":["BusyGear.svg","Currency.js","TopBar.js","StockEntry.js","StockServerData.js","webpack:///./src/BusyGear.svg?cafd","BusyOverlay.js","PerformanceGraph.js","PortfolioView.js","Portfolio.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Currency","amount","arguments","length","undefined","localStorage","this","rateEtoD","JSON","parse","getItem","toFixed","TopBar","Button","styled","button","_templateObject","div","_templateObject2","ButtonContainer","_templateObject3","CurrencyTable","_templateObject4","react_default","a","createElement","onClick","props","caller","addPortfolio","bind","updateValues","updateForex","EtoD","DtoE","Component","StockEntry","symbol","value","updated","Object","classCallCheck","totalValue","newValue","StockServerData","storageKey","interval","treshold","Date","now","checkTimeout","whoCalled","doQuery","toUpperCase","JSONKeys","result","query","name","request","Promise","resolve","setTimeout","xhttp","XMLHttpRequest","onload","returnValue","responseText","sessionStorage","alert","setItem","forEach","key","storable","stringify","saveState","open","send","_extends","assign","target","i","source","prototype","hasOwnProperty","call","apply","BusyGear_ref","d","_ref2","BusyGear_SvgComponent","version","id","xmlnsXlink","x","y","viewBox","style","enableBackground","xmlSpace","BusyOverlay","Overlay","BusyOverlay_templateObject","BusyDialog","BusyOverlay_templateObject2","Spin","BusyOverlay_templateObject3","overlay","document","getElementById","visibility","PerformanceGraph","GraphOverlay","attrs","PerformanceGraph_templateObject","ChartDialog","PerformanceGraph_templateObject2","ChartControls","PerformanceGraph_templateObject3","DateContainer","PerformanceGraph_templateObject4","DateInput","input","type","_templateObject5","CloseButton","_templateObject6","body","overflow","set","getStockHistory","response","unset","chartData","parseData","createChart","startDate","endDate","returnDates","returnValues","JSONData","keys","sort","date","localeCompare","push","dates","values","ctx","perfChart","destroy","label","Chart","data","labels","datasets","borderColor","borderWidth","cubicInterpolationMode","pointRadius","options","legend","boxWidth","scales","yAxes","ticks","beginAtZero","minDate","maxDate","startPicker","endPicker","closeButton","min","max","addEventListener","evt","redrawChart","removeItem","closeChart","newData","update","PortfolioView","_this","possibleConstructorReturn","getPrototypeOf","portfolios","portfolio","stockFound","entries","addExisting","window","confirm","prompt","existingIndex","doConvert","isNaN","currency","getCurrentStockValue","addStock","removeStock","selected","removeID","splice","createChartWindow","PortfolioContainer","PortfolioView_templateObject","PortfolioSection","PortfolioView_templateObject2","portfolioArray","currentPortfolio","deletePortfolio","uniqueID","PortfolioView_TitleBar","PortfolioView_StockList","self","PortfolioView_BottomBar","createGraph","TitleBar","TitleBarContainer","PortfolioView_templateObject3","Title","PortfolioView_templateObject4","PortfolioView_templateObject5","PortfolioView_Switch","labelOff","labelOn","onChange","changeCurrency","on","StockList","Table","table","PortfolioView_templateObject6","TableHeader","thead","_templateObject7","HeaderRow","tr","_templateObject8","TableBody","tbody","_templateObject9","TableRow","_templateObject10","Cell","td","_templateObject11","stockList","tableBodyData","unitValue","getCurrentValue","getCurrentRate","checked","readOnly","BottomBar","_templateObject12","CuttingText","_templateObject13","LeftHalf","_templateObject14","RightHalf","_templateObject15","_templateObject16","FloatRight","Switch","_this2","state","setState","rot","SwitchContainer","_templateObject17","_templateObject18","flip","Portfolio","entry","index","toRemove","parseInt","getTotalValue","calculateValue","parseFloat","stock","setValue","App","counter","savedPortfolios","toPush","j","tempStock","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","sent","stop","_x","getCurrentForex","AppMainDiv","App_templateObject","TopBar_TopBar","PortfolioView_PortfolioView","components","App_App","BusyOverlay_BusyOverlay","PerformanceGraph_PerformanceGraph","ReactDOM","render"],"mappings":"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","file":"static/js/main.1c0c622a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BusyGear.a7601404.svg\";","/* Class for currency conversions.  */\r\n\r\nexport default class Currency {\r\n    static rateEtoD = 1;\r\n\r\n    static EtoD(amount = 1) {\r\n        if (\"EUR\" in localStorage) this.rateEtoD = JSON.parse(localStorage.getItem(\"EUR\"))[\"value\"];\r\n        return (amount * this.rateEtoD).toFixed(4);\r\n    }\r\n\r\n    static DtoE(amount = 1) {\r\n        if (\"EUR\" in localStorage) this.rateEtoD = JSON.parse(localStorage.getItem(\"EUR\"))[\"value\"];\r\n        return (amount * (1 / this.rateEtoD)).toFixed(4);\r\n    }\r\n}","/*  The main menu for the app. Displays the current exchange rates as well. */\r\n\r\nimport React, {Component} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Currency from \"./Currency\";\r\n\r\nexport default class TopBar extends Component {\r\n\r\n    render() {\r\n        const Button = styled.button`\r\n            width: 148px;\r\n            margin-bottom: 10px;\r\n        `;\r\n\r\n        const TopBar = styled.div`\r\n            display: flex;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            width: calc(100vw - 70px);\r\n            max-width: 1330px;\r\n            @media screen and (max-width: 1024px) {\r\n                width: calc(100% - 35px);\r\n                max-width: 650px;\r\n            }\r\n            @media screen and (max-width: 360px) {\r\n                flex-direction: column;\r\n                align-items: center;\r\n            }\r\n        `;\r\n\r\n        const ButtonContainer = styled.div`\r\n            @media screen and (max-width: 360px) {\r\n            width: 150px;\r\n        `;\r\n\r\n        const CurrencyTable = styled.div`\r\n            display: table-cell;\r\n            min-width: 150px;\r\n            max-height: 48px;\r\n            text-align: right;\r\n            @media screen and (max-width: 360px) {\r\n                width: 150px;\r\n                text-align: center;\r\n            }\r\n        `;\r\n\r\n        return (\r\n            <TopBar>\r\n                <ButtonContainer>\r\n                    <Button onClick={this.props.caller.addPortfolio.bind(this.props.caller)}>Create New Portfolio</Button>\r\n                    <Button onClick={this.props.caller.updateValues.bind(this.props.caller)}>Update stock values</Button>\r\n                    <Button onClick={this.props.caller.updateForex.bind(this.props.caller)}>Update exchange rate</Button>\r\n                </ButtonContainer>\r\n                <CurrencyTable>\r\n                    1 EUR = {Currency.EtoD()} USD<br/>\r\n                    1 USD = {Currency.DtoE()} EUR\r\n                </CurrencyTable>\r\n            </TopBar>\r\n        )\r\n    }\r\n}\r\n\r\n","/*  A class for a single stock entry and some methods to manipulate it. */\r\n\r\nexport default class StockEntry {\r\n    constructor(symbol, value, amount = 0, updated = null){\r\n        this.symbol = symbol;\r\n        this.value = value;\r\n        this.amount = amount;\r\n        this.totalValue = this.value * this.amount;\r\n        this.updated = updated;\r\n    }\r\n\r\n    getTotalValue() {\r\n        return this.value * this.amount;\r\n    }\r\n\r\n    setValue(newValue) {\r\n        this.value = newValue;\r\n        this.totalValue = this.value * this.amount;\r\n    }\r\n}","/* Class for communicating with the stock data server AlphaVantage.com. The doQuery-method is the one excecuting all\r\n* requests, while getCurrentForex, getCurrentStockValue and getStockHistory are convenience methods that format specific\r\n* queries and sends them to doQuery.\r\n*\r\n* The doQuery-method returns quasi-http-statuses that tells the calling methods if the queries succeeded or not. */\r\n\r\nexport default class StockServerData {\r\n    static checkTimeout(storageKey, interval) {\r\n        // Method to check if a value in localStorage is older than a specified age in milliseconds\r\n        let treshold = Date.now() - interval;\r\n        if (storageKey in localStorage && JSON.parse(localStorage.getItem(storageKey))[\"updated\"] > treshold) return false;\r\n        return true;\r\n    }\r\n\r\n    static getCurrentForex(caller){\r\n        // Method to query for the latest currency exchange rate between EUR and USD if the value has not been updated\r\n        // in the last 60 seconds.\r\n        if (this.checkTimeout(\"EUR\", 60000)) {\r\n            this.whoCalled = caller;\r\n            let JSONKeys = [\"Realtime Currency Exchange Rate\", \"5. Exchange Rate\"];\r\n            this.doQuery(\"CURRENCY_EXCHANGE_RATE&from_currency=EUR&to_currency=USD\", \"EUR\", JSONKeys);\r\n        }\r\n    }\r\n\r\n    static async getCurrentStockValue(caller, symbol) {\r\n        // Method to query for the latest value of a given stock if the value has not been updated in the last 30 minutes.\r\n        if (this.checkTimeout(symbol, 30 * 60000)) {\r\n            this.whoCalled = caller;\r\n            symbol = symbol.toUpperCase();\r\n            let JSONKeys = [\"Global Quote\", \"05. price\"];\r\n            let result = await this.doQuery(\"GLOBAL_QUOTE&symbol=\" + symbol, symbol, JSONKeys);\r\n            return result;\r\n        }\r\n        return 200;\r\n    }\r\n\r\n    static async getStockHistory(caller, symbol) {\r\n        // Method to query for the performance history of a given stock. This data is always loaded from the server,\r\n        // since storing the data locally would fill up the storage quota very quickly.\r\n        this.whoCalled = caller;\r\n        let storageKey = symbol + \"History\";\r\n        symbol = symbol.toUpperCase();\r\n        let JSONKeys = [\"Time Series (Daily)\"];\r\n        return await this.doQuery(\"TIME_SERIES_DAILY&symbol=\" + symbol + \"&outputsize=full\", storageKey, JSONKeys);\r\n    }\r\n\r\n    static doQuery(query, name, JSONKeys) {\r\n        let whoCalled = this.whoCalled;\r\n        let apikey = \"myownapikey\"; // The API key for the server. Free ones are available, but a \"legit\" one is actually not required... :-o\r\n        let server =\"https://www.alphavantage.co/query?function=\";\r\n        let request = server + query + \"&apikey=\" + apikey;\r\n\r\n        return new Promise(resolve => {\r\n\r\n            // Set the request timeout to 10 seconds\r\n            setTimeout(() => {\r\n                resolve(504);\r\n            }, 10000);\r\n\r\n            let xhttp = new XMLHttpRequest(); // Create a request object\r\n\r\n            xhttp.onload = function() {\r\n                /* Define the action to take when the server has responded. This must be done before the request is dispatched. */\r\n                let returnValue = JSON.parse(this.responseText);\r\n\r\n                /* If the server responds with a message about sending more than five requests in a minute, notify the user and\r\n                 * set a key in localStorage with a timestamp. This timestamp is used to prevent more queries to be sent within\r\n                 * the next minute and to prevent the already sent queries to cause several popups which would seriously\r\n                 * harm the usability of the app. */\r\n                if (\"Note\" in returnValue) {\r\n                    if (!(\"requestLimit\" in sessionStorage && sessionStorage.getItem(\"requestLimit\") > Date.now() - 61000)) {\r\n                        let message = \"Could not fetch all requested stock data due to restrictions on free AlphaVantage API-keys, try again in a moment.\\n\\nThe server said:\\n\";\r\n                        alert(message + JSON.parse(this.responseText)[\"Note\"]);\r\n                        sessionStorage.setItem(\"requestLimit\", Date.now());\r\n                    }\r\n                    /* Set the response code to 200 (\"OK\"), even though the request was not met. This is actually just\r\n                    *  a lazy way to prevent other methods from creating popups because of the same error.\r\n                     */\r\n                    resolve(200);\r\n                    return;\r\n                }\r\n\r\n                /* If the server responded with some data, parse the data for the needed value(s) and store them in localStorage. */\r\n                JSONKeys.forEach(key => returnValue = returnValue[key]);\r\n                let storable = {value: returnValue, updated: Date.now()};\r\n                localStorage.setItem(name, JSON.stringify(storable));\r\n                whoCalled.saveState();\r\n                resolve(200);\r\n            };\r\n            // Create the actual request and send it to the server.\r\n            xhttp.open(\"GET\", request, true);\r\n            xhttp.send();\r\n        });\r\n    }\r\n}\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"g\", null, React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M256,151c-57.897,0-105,47.103-105,105c0,57.897,47.103,105,105,105c57.897,0,105-47.103,105-105 C361,198.103,313.897,151,256,151z M256,331c-41.355,0-75-33.645-75-75c0-41.355,33.645-75,75-75s75,33.645,75,75 S297.355,331,256,331z\"\n})));\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", null, React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M500.582,211.434l-58.674-14.428c-3.532-11.13-8.068-21.925-13.551-32.249c8.78-14.634,27.343-45.573,27.343-45.573 c3.541-5.902,2.611-13.457-2.256-18.324l-42.426-42.426c-4.867-4.867-12.422-5.797-18.324-2.256 c-0.38,0.228-30.777,18.466-45.626,27.355c-10.269-5.431-20.995-9.927-32.052-13.434c-4.428-17.976-14.451-58.686-14.452-58.686 C298.914,4.711,292.902,0,286,0h-60c-6.903,0-12.915,4.711-14.565,11.414c-4.126,16.76-11.024,44.779-14.45,58.68 c-11.762,3.73-23.143,8.578-34.001,14.482c-6.428-3.856-16.007-9.604-24.869-14.921l-22.462-13.477 c-5.905-3.541-13.457-2.61-18.324,2.256L54.901,100.86c-4.867,4.867-5.797,12.422-2.256,18.324 c0.2,0.335,17.785,29.644,29.271,48.869c-4.712,9.31-8.665,18.986-11.817,28.919c-20.002,4.976-58.223,14.35-58.671,14.46 C4.718,213.077,0,219.092,0,226v60c0,6.909,4.719,12.923,11.429,14.568c0.443,0.109,38.381,9.411,58.687,14.436 c3.565,11.302,8.184,22.273,13.796,32.78l-26.194,43.66c-3.541,5.902-2.611,13.458,2.256,18.324l42.427,42.427 c4.867,4.868,12.421,5.797,18.324,2.256c0.369-0.222,29.463-17.678,43.746-26.227c10.419,5.547,21.313,10.131,32.547,13.692 l14.416,58.66C213.079,507.284,219.093,512,226,512h60c6.904,0,12.917-4.713,14.566-11.418l14.427-58.669 c11.539-3.661,22.671-8.39,33.257-14.128c14.427,8.656,44.444,26.667,44.444,26.667c5.901,3.541,13.457,2.612,18.324-2.256 l42.426-42.427c4.867-4.867,5.797-12.422,2.256-18.324c0,0-18.271-30.452-26.958-44.931c5.308-10.088,9.712-20.634,13.161-31.511 c17.824-4.399,58.19-14.317,58.676-14.436C507.285,298.919,512,292.906,512,286v-60C512,219.095,507.287,213.083,500.582,211.434z M482,274.24c-17.32,4.257-48.723,11.979-54.72,13.479l-1.131,0.283c-5.231,1.36-9.326,5.43-10.719,10.653 c-3.795,14.229-9.495,27.872-16.942,40.548c-2.779,4.732-2.753,10.605,0.069,15.312c0.78,1.301,16.489,27.483,25.393,42.322 L398.087,422.7c-15.046-9.027-41.716-25.029-41.942-25.165c-4.775-2.866-10.743-2.853-15.501,0.035 c-13,7.885-27.109,13.892-41.938,17.854c-5.177,1.383-9.224,5.422-10.614,10.597c-0.828,3.081-1.644,6.34-1.658,6.397L274.241,482 h-36.479l-10.813-44.042l-2.916-11.664c-1.322-5.292-5.415-9.45-10.686-10.855c-14.533-3.876-28.479-9.747-41.449-17.447 c-4.709-2.797-10.57-2.802-15.285-0.018c-3.23,1.908-27.254,16.313-41.282,24.728l-25.865-25.865l24.661-41.104 c2.841-4.736,2.85-10.65,0.022-15.395c-7.784-13.063-13.685-27.073-17.535-41.643c-1.397-5.286-5.56-9.393-10.863-10.719 c-10.737-2.684-39.564-9.767-55.752-13.741v-36.473c16.342-4.015,45.537-11.199,55.762-13.786 c5.271-1.334,9.408-5.417,10.812-10.671c3.564-13.347,8.822-26.228,15.63-38.286c2.646-4.686,2.578-10.43-0.177-15.053 c-7.25-12.166-20.08-33.577-27.632-46.172l25.865-25.866l12.42,7.452c14.968,8.981,31.98,19.188,32.44,19.463 c4.768,2.85,10.722,2.832,15.472-0.049c13.341-8.088,27.726-14.222,42.756-18.232c5.264-1.404,9.352-5.552,10.68-10.836 c0.282-1.121,9.071-36.815,13.728-55.726h36.49c4.915,19.958,13.621,55.312,13.724,55.722c1.326,5.288,5.417,9.44,10.685,10.845 c14.382,3.836,28.193,9.626,41.05,17.208c4.714,2.781,10.57,2.773,15.276-0.021c4.208-2.498,28.881-17.293,43.106-25.827 l25.864,25.864c-9.037,15.062-25.121,41.869-25.795,42.991c-2.836,4.725-2.853,10.625-0.043,15.367 c7.628,12.872,13.451,26.714,17.308,41.141c1.382,5.167,5.408,9.207,10.57,10.604c3.097,0.839,6.373,1.657,6.428,1.671 L482,237.758V274.24z\"\n})));\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    version: 1.1,\n    id: \"Layer_1\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 512 512\",\n    style: {\n      \"enableBackground\": \"new 0 0 512 512\"\n    },\n    xmlSpace: \"preserve\"\n  }, props), _ref, _ref2);\n};\n\nexport default __webpack_public_path__ + \"static/media/BusyGear.a7601404.svg\";\nexport { SvgComponent as ReactComponent };","/* Overlay that grays out the screen and shows an animated gear when the application is busy. */\r\n\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport gear from \"./BusyGear.svg\";\r\nimport { ReactComponent as Gear } from './BusyGear.svg';\r\n\r\nexport default class BusyOverlay extends Component {\r\n\r\n    static set() {\r\n        this.overlay = document.getElementById(\"busyOverlay\")\r\n        this.overlay.style.visibility = \"visible\";\r\n    }\r\n\r\n    static unset() {\r\n        this.overlay.style.visibility = \"hidden\";\r\n    }\r\n\r\n    render() {\r\n        const Overlay = styled.div`\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            margin: 0;\r\n            background: rgba(0, 0, 0, 0.3);\r\n            z-index: 1;\r\n            visibility: hidden;\r\n        `;\r\n\r\n        const BusyDialog = styled.div`\r\n            position: absolute;\r\n            text-align: center;\r\n            background-color: rgba(222, 222, 160, 1);\r\n            width: auto;\r\n            height: auto;\r\n            padding: 2em;\r\n            padding-bottom: 1em;\r\n            top: 30%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            border-radius: 10px;\r\n            border: 3px dashed black;\r\n            color: black;\r\n        `;\r\n\r\n        const Spin = styled.div`\r\n            display: inline-block;\r\n            width: 50%;\r\n            animation: spin 5s infinite linear;\r\n            @keyframes spin {\r\n            from {\r\n                transform:rotate(0deg);\r\n            }\r\n            to {\r\n                transform:rotate(360deg);\r\n            }`;\r\n\r\n        return (\r\n            <Overlay id=\"busyOverlay\">\r\n                <BusyDialog>\r\n                    Loading, please wait...\r\n                    <p>\r\n                        <Spin>\r\n                            <Gear/>\r\n                        </Spin>\r\n                    </p>\r\n                </BusyDialog>\r\n            </Overlay>\r\n        )\r\n    }\r\n}","/* This class renders the overlay with a chart presenting the historical data of a given stock. */\r\n\r\nimport React, {Component} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Chart} from \"chart.js\";\r\nimport StockServerData from \"./StockServerData\";\r\nimport BusyOverlay from \"./BusyOverlay\";\r\n\r\nexport default class PerformanceGraph extends Component {\r\n    static async createChartWindow(whoCalled, symbol) {\r\n        /* This is the main method that is called upon to show the stock performance chart. */\r\n        if (symbol === undefined) return;\r\n\r\n        /* Disable scrolling of the underlying main layer of the app. According to documentation, this disables the ability\r\n         * to scroll the chart div as well on Apple Safari and related browsers, but since this app (and the chart div\r\n         * with it) is designed to rescale all the way down to a width of 200px, that should not be a problem in practice. */\r\n        document.body.style.overflow = \"hidden\";\r\n\r\n        BusyOverlay.set(); // Show the BusyOverlay while getting data from the server so that the user knows the app hasn't frozen.\r\n        let response = await StockServerData.getStockHistory(whoCalled, symbol);\r\n        BusyOverlay.unset(); // Hide the BusyOverlay.\r\n\r\n        if (response !== 200) {\r\n            // If something went wrong...\r\n            alert(\"Could not fetch stock history, please try again later\");\r\n            return;\r\n        }\r\n\r\n        let chartData = PerformanceGraph.parseData(symbol);\r\n\r\n        // Show the div with the graph\r\n        let chartDiv = document.getElementById(\"graph_overlay\").style;\r\n        chartDiv.visibility = \"visible\";\r\n\r\n        // Draw the graph in the div\r\n        PerformanceGraph.createChart(chartData, symbol);\r\n    }\r\n\r\n    static parseData(symbol) {\r\n        /* Method that reads the historical data of a stock from localStorage, sorts it chronologically and returns\r\n         * the values between the starting and ending dates that are chosen in the date pickers in the overlay.\r\n          * If no dates are given, the entire available history for the stock is returned. */\r\n\r\n        let startDate = document.getElementById(\"startDate\").value;\r\n        let endDate = document.getElementById(\"endDate\").value;\r\n\r\n        if (startDate === '') startDate = 0;\r\n        if (endDate === '') endDate = 9;\r\n\r\n        let returnDates = [], returnValues = [];\r\n        symbol += \"History\";\r\n        let JSONData = JSON.parse(localStorage.getItem(symbol))[\"value\"];\r\n        let dates = Object.keys(JSONData).sort();\r\n        dates.forEach(date => {\r\n            if (date.localeCompare(startDate) > 0 && date.localeCompare(endDate) < 0) {\r\n                returnValues.push(JSONData[date][\"4. close\"]);\r\n                returnDates.push(date);\r\n            }\r\n        });\r\n        return {dates: returnDates, values: returnValues};\r\n    }\r\n\r\n    static createChart(chartData, symbol) {\r\n        /* Method that creates the actual graph of the stock value development. After the graph is created, the values in\r\n        the date pickers are set to their correct values and listeners for changes in the date pickers and the close\r\n        button are created. */\r\n        let ctx = document.getElementById(\"canvas\");\r\n        if (this.perfChart != null) this.perfChart.destroy();\r\n\r\n        let label = \"Stock: \" + symbol + \"     Currency: USD\";\r\n        this.perfChart = new Chart(ctx, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: chartData.dates,\r\n                datasets: [{\r\n                    label: label,\r\n                    data: chartData.values,\r\n                    borderColor: \"rgba(255, 0, 0, 10)\",\r\n                    borderWidth: 1,\r\n                    cubicInterpolationMode: 'monotone',\r\n                    pointRadius: 0,\r\n                }]\r\n            },\r\n            options: {\r\n                legend: {\r\n                    labels: {\r\n                        boxWidth: 0\r\n                    },\r\n                },\r\n                scales: {\r\n                    yAxes: [{\r\n                        ticks: {\r\n                            beginAtZero:true\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n        });\r\n\r\n        let minDate = chartData.dates[0];\r\n        let maxDate = chartData.dates[chartData.dates.length - 1];\r\n        let startPicker = document.getElementById(\"startDate\");\r\n        let endPicker = document.getElementById(\"endDate\");\r\n        let closeButton = document.getElementById(\"closeButton\");\r\n\r\n        startPicker.value = minDate;\r\n        startPicker.min = minDate;\r\n        startPicker.max = maxDate;\r\n\r\n        endPicker.value = maxDate;\r\n        endPicker.min = minDate;\r\n        endPicker.max = maxDate;\r\n\r\n        startPicker.addEventListener(\"change\", evt => {\r\n            PerformanceGraph.redrawChart(symbol);\r\n        });\r\n\r\n        endPicker.addEventListener(\"change\", evt => {\r\n            PerformanceGraph.redrawChart(symbol);\r\n        });\r\n\r\n        closeButton.addEventListener(\"click\", evt => {\r\n            localStorage.removeItem(symbol + \"History\");\r\n            PerformanceGraph.closeChart();\r\n        });\r\n\r\n    }\r\n\r\n    static redrawChart(symbol) {\r\n        /* The method that is called when the user changes the dates in the date pickers. */\r\n        let newData = PerformanceGraph.parseData(symbol); // Parse the data between the new dates chosen\r\n        this.perfChart.data.labels = newData.dates; // Set the new values for the x-axis\r\n        this.perfChart.data.datasets[0].data = newData.values // Set the new values for the dataset\r\n        this.perfChart.update(0); // Redraw the chart.\r\n    }\r\n\r\n    static closeChart() {\r\n        /* Hide the chart and restore the ability to scroll the main layer of the app when needed */\r\n        document.getElementById(\"graph_overlay\").style.visibility = \"hidden\";\r\n        document.body.style.overflow = \"auto\";\r\n    }\r\n\r\n    render() {\r\n        const GraphOverlay = styled.div.attrs({\r\n            id: \"graph_overlay\",\r\n        })`{\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: rgba(0, 0, 0, 0.3);\r\n            z-index: 1;\r\n            visibility: hidden;\r\n        `;\r\n\r\n        const ChartDialog = styled.div`\r\n            position: absolute;\r\n            width: 60%;\r\n            min-width: 650px;\r\n            top: 5%;\r\n            left: 50%;\r\n            transform: translate(-50%, -3%);\r\n            padding: 10px 10px 15px 15px;\r\n            border: 2px solid black;\r\n            background-color: white;\r\n            font-family: monospace;\r\n            @media screen and (max-width: 720px) {\r\n                width: 90%;\r\n                min-width: 215px;\r\n            }\r\n            @media screen and (max-height: 340px) {\r\n                flex-direction: column;\r\n                overflow: scroll;\r\n                max-height: 95%;\r\n            }\r\n        `;\r\n\r\n        const ChartControls = styled.div`\r\n            display: flex;\r\n            @media screen and (max-width: 660px) {\r\n                {\r\n                    display: initial;\r\n                }\r\n        `;\r\n\r\n        const DateContainer = styled.div`\r\n            float: left;\r\n            width: 40%;\r\n            @media screen and (max-width: 660px) {\r\n                width: 60%;\r\n            }\r\n        `;\r\n\r\n        const DateInput = styled.input.attrs({\r\n            type: \"date\",\r\n        })`\r\n            margin-right: 10px;\r\n        `;\r\n\r\n        const CloseButton = styled.button.attrs({\r\n            id: \"closeButton\",\r\n        })`\r\n            float: right;\r\n            align-self: flex-end;\r\n            flex-grow: 1;\r\n        `;\r\n\r\n        return(\r\n            <GraphOverlay>\r\n                <ChartDialog>\r\n                    <canvas id=\"canvas\"></canvas>\r\n                    <ChartControls>\r\n                        <DateContainer>\r\n                            Start date: <DateInput id=\"startDate\" />\r\n                        </DateContainer>\r\n                        <DateContainer>\r\n                            End date: &nbsp;&nbsp;<DateInput id=\"endDate\" />\r\n                        </DateContainer>\r\n                        <CloseButton>Close</CloseButton>\r\n                    </ChartControls>\r\n                </ChartDialog>\r\n            </GraphOverlay>\r\n        )\r\n    }\r\n}\r\n","/* This file is responsible for rendering the section with the portfolios. */\r\n\r\nimport React, {Component} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport StockEntry from \"./StockEntry\";\r\nimport Currency from \"./Currency\";\r\nimport StockServerData from \"./StockServerData\";\r\nimport PerformanceGraph from \"./PerformanceGraph\";\r\nimport BusyOverlay from \"./BusyOverlay\";\r\n\r\nexport default class PortfolioView extends Component {\r\n    /* The main class for the PortfolioView-component. */\r\n\r\n    constructor(props){\r\n        super(props);\r\n        // The portfolios and a pointer to the method that saves the global state are passed down as props.\r\n        this.saveState = props.saveState;\r\n        this.portfolios = props.portfolios;\r\n    }\r\n\r\n    async addStock(portfolio) {\r\n        /* Method to add new stocks to a portfolio or add shares to existing stocks. */\r\n        let stockFound = false;\r\n        let value, amount;\r\n\r\n        if (portfolio.entries.length >= 50) {\r\n            // The maximum number of stock symbols in a portolio is 50. If the limit has been reached, alert the user\r\n            // and return to caller.\r\n            var addExisting = window.confirm(\"The maximum number of stocks in the current portfolio has been reached. Do you wish to add shares to an existing stock?\");\r\n            if (addExisting === false) return;\r\n        }\r\n\r\n        let symbol = prompt(\"Please enter stock symbol\");\r\n        if (!symbol) return;\r\n        symbol = symbol.toUpperCase();\r\n\r\n        // If the stock symbol already exists, add the new shares to that existing entry.\r\n        for (let i = 0; i < portfolio.entries.length; i++) {\r\n            if (portfolio.entries[i].symbol === symbol) {\r\n                stockFound = true;\r\n                var existingIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (addExisting && !stockFound) {\r\n            alert(\"The entered symbol does not exist in portfolio.\");\r\n            return;\r\n        }\r\n\r\n        // If the symbol exists in the local storage, get the share value from there, otherwise prompt the user for a\r\n        // value or to fetch the value from AlphaVantage.\r\n        let doConvert = true;\r\n        if (symbol in localStorage) {\r\n            doConvert = false;\r\n            value = JSON.parse(localStorage.getItem(symbol))[\"value\"];\r\n        }\r\n\r\n        while (!value || isNaN(value)) {\r\n            value = prompt(\"Please enter value per share in \" + portfolio.currency + \".\\nLeave blank to fetch the current value from AlphaVantage.\");\r\n            if (value === null) return;\r\n            if (value < 0) value = \".\";\r\n            if (value === '') {\r\n                BusyOverlay.set();\r\n                let response = await StockServerData.getCurrentStockValue(this, symbol);\r\n                BusyOverlay.unset();\r\n                if (response === 200) {\r\n                    value = JSON.parse(localStorage.getItem(symbol))[\"value\"];\r\n                } else {\r\n                    // If something went wrong, tell the user and present them with the earlier options again.\r\n                    localStorage.removeItem(symbol);\r\n                    alert(\"Could not fetch stock value from server. Please try again or enter value manually.\");\r\n                    value = \".\";\r\n                }\r\n            }\r\n        }\r\n\r\n        // Ask for the number of shares. If the portfolio currency is in EUR (and the share value thus entered in EUR),\r\n        // convert the value to USD before storing it.\r\n        while (!amount || isNaN(amount) || amount % 1 !== 0 || amount < 0) {\r\n            amount = prompt(\"Please enter the number of shares to add.\");\r\n            if (amount === null) return;\r\n        }\r\n        if (portfolio.currency === \"EUR\" && doConvert) value = Currency.EtoD(value);\r\n\r\n        if (stockFound) {\r\n            portfolio.addStock(new StockEntry(symbol, value, amount), existingIndex);\r\n        } else {\r\n            portfolio.addStock(new StockEntry(symbol, value, amount));\r\n        }\r\n        this.saveState();\r\n    }\r\n\r\n    removeStock(portfolio) {\r\n        // Method to invoke removal of shares from a stock entry.\r\n        let amount = prompt(\"Amount to remove\");\r\n        portfolio.removeStock(portfolio.selected, amount);\r\n        this.saveState();\r\n    }\r\n\r\n    deletePortfolio(removeID) {\r\n        // Method that is invoked when the close-button of a portfolio is pressed. The portfolio ID is a running number\r\n        // that doesn't neccesarily match the portfolio's index in the array with portfolios, so the array must be looped\r\n        // through to find the correct one.\r\n        for (let i = 0; i < this.portfolios.length; i++) {\r\n            if (this.portfolios[i] === (undefined || null)) continue;\r\n            if (this.portfolios[i].id === removeID) {\r\n                if (window.confirm(\"Do you want to delete the portfolio \" + this.portfolios[i].name + \"?\")) {\r\n                    this.portfolios.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n        this.saveState();\r\n    }\r\n\r\n    async createGraph(portfolio) {\r\n        // Initiate the generation and showing of a performance graph for a selected stock.\r\n        if (portfolio.selected === '') return;\r\n        let symbol = portfolio.entries[portfolio.selected].symbol;\r\n        PerformanceGraph.createChartWindow(this, symbol);\r\n    }\r\n\r\n    render() {\r\n        const PortfolioContainer = styled.div`\r\n            float: left;\r\n            display: flex;\r\n            flex-direction: column;\r\n            width: calc(50vw - 50px);\r\n            min-width: 200px;\r\n            max-width: 650px;\r\n            border: 1px solid black;\r\n            margin: 0 15px 20px;\r\n            :only-child {\r\n                width: calc(100vW - 50px);\r\n            }\r\n            @media screen and (max-width: 1024px) {\r\n                width: calc(100vw - 50px);\r\n            }\r\n        `;\r\n\r\n        const PortfolioSection = styled.div`\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            width: calc(100vw - 40px);\r\n            float: left;\r\n            justify-content: center;\r\n            @media screen and (max-width: 1024px) {\r\n                flex-wrap: wrap;\r\n            }\r\n            `;\r\n\r\n        let portfolioArray = [];\r\n\r\n        // Loop through the list of portfolios and create an array with rendered visualisations of them\r\n        for(let i = 0; i < this.portfolios.length; i++) {\r\n            if (this.portfolios[i] === (undefined || null)) continue;\r\n\r\n            let currentPortfolio = this.portfolios[i];\r\n            let deletePortfolio = this.deletePortfolio.bind(this, currentPortfolio.id);\r\n            let uniqueID = \"id\" + currentPortfolio.id;\r\n\r\n            // Each portfolio component consists of a TitleBar, a stock list and a BottomBar.\r\n            portfolioArray.push(\r\n                <PortfolioContainer>\r\n                    <TitleBar currentPortfolio={currentPortfolio} uniqueID={uniqueID} deletePortfolio={deletePortfolio} saveState={this.saveState} />\r\n                    <StockList portfolio={currentPortfolio} self={this} />\r\n                    <BottomBar currentPortfolio={currentPortfolio} addStock={this.addStock.bind(this, currentPortfolio)} removeStock={this.removeStock.bind(this, currentPortfolio)} createGraph={this.createGraph.bind(this, currentPortfolio)}/>\r\n                </PortfolioContainer>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <PortfolioSection>\r\n                {portfolioArray}\r\n            </PortfolioSection>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass TitleBar extends Component{\r\n    // The title bar for the portfolio. Contains the name of the portfolio, a switch for switching between currencies,\r\n    // and a button to close (ie. delete) the portfolio.\r\n    render() {\r\n        const TitleBarContainer = styled.div`\r\n            background-color: #DDA;\r\n            display: flex;\r\n            min-height: 40px;\r\n            align-items: center;\r\n            padding: 10px;\r\n            border-bottom: 1px solid black;\r\n            text-align: center;        \r\n            @media screen and (max-width: 266px) {\r\n                    font-size: 10px;\r\n            }\r\n            @media screen and (max-height: 425px) {\r\n                    min-height: 46px;\r\n            }\r\n            `;\r\n\r\n        const Title = styled.div`\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            flex-grow: 3.5;\r\n        `;\r\n\r\n        // The close-button is a normal button styled in CSS to mimic the classic windows close-button.\r\n        const CloseButton = styled.div`\r\n            background-color: darkred;\r\n            color: white;\r\n            font-family: Corbel, monospace;\r\n            font-weight: bold;\r\n            width: 1.4em;\r\n            height: 1.3em;\r\n            border-bottom: 1px solid darkred;\r\n            cursor: default;\r\n            margin-left: 5px;\r\n            :hover {\r\n                background-color: firebrick;\r\n                border: 1px solid gray;\r\n            }\r\n        `;\r\n\r\n        var currentPortfolio = this.props.currentPortfolio;\r\n\r\n        return (\r\n            <TitleBarContainer>\r\n                <Title>\r\n                    {currentPortfolio.name}\r\n                </Title>\r\n                <Switch labelOff=\"EUR\" labelOn=\"USD\" onChange={currentPortfolio.changeCurrency.bind(currentPortfolio)} saveState={this.props.saveState} on={currentPortfolio.currency === \"EUR\"}/>\r\n                <CloseButton id={\"button\" + this.props.uniqueID } onClick={this.props.deletePortfolio}>\r\n                    X\r\n                </CloseButton>\r\n            </TitleBarContainer>\r\n        )\r\n    }\r\n}\r\n\r\nclass StockList extends Component {\r\n    // Create a table with a list of the stocks in a given portfolio. The table is returned as a DOM-element to the caller.\r\n    render() {\r\n        const Table = styled.table`\r\n            display: block;\r\n            text-align: center;\r\n        `;\r\n\r\n        const TableHeader = styled.thead`\r\n            display: block;\r\n        `;\r\n\r\n        const HeaderRow = styled.tr`\r\n            display: flex;\r\n            background-color: #CCC;\r\n            min-height: 1.8em;\r\n            font-weight: normal;\r\n            border-bottom: 1px solid black;\r\n        `;\r\n\r\n        const TableBody = styled.tbody`\r\n            display: flex;\r\n            flex-direction: column;\r\n            overflow: auto;\r\n            width: 100%;\r\n            height: -webkit-fill-available;\r\n            max-height: 261px;\r\n            background: linear-gradient(\r\n                    to bottom,\r\n                    rgba(220, 220, 220, 0.3),\r\n                    rgba(240, 240, 240, 0.1) 80%,\r\n                    rgba(200, 200, 200, 0.3) 50%,\r\n                    rgba(220, 220, 220, 0.3) 50%\r\n            );\r\n            background-size: 1% 5px;        \r\n            @media screen and (max-height: 425px) {\r\n                max-height: calc(100vh - 164px);\r\n            }\r\n            @media screen and (max-height: 232px) {\r\n                max-height: 68px;\r\n            }\r\n        `;\r\n\r\n        const TableRow = styled.tr`\r\n            display: block;\r\n            background-color: #CCC;\r\n            :nth-child(even) {\r\n                display: block;\r\n                background-color: #AAA;\r\n            }\r\n        `;\r\n\r\n        const Cell = styled.td`\r\n            width: 20%;\r\n            float: left;\r\n            padding: 0;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            margin-top: 4px;\r\n        `;\r\n\r\n        let portfolio = this.props.portfolio;\r\n        let stockList = portfolio.entries;\r\n        let tableBodyData = [];\r\n        var self = this.props.self;\r\n\r\n        // The list itself is created here as a html table-body styled with alternating colored rows\r\n        for(let i = 0; i < stockList.length; i++) {\r\n            if(stockList[i] == null) continue;\r\n\r\n            let unitValue = portfolio.getCurrentValue(stockList[i]);\r\n            let totalValue = portfolio.getCurrentRate(stockList[i].totalValue);\r\n\r\n            let setSelected = function (i) {\r\n                portfolio.selected = i;\r\n                self.saveState();\r\n            }\r\n\r\n            tableBodyData.push(\r\n                <TableRow onClick={setSelected.bind(self, i)}>\r\n                    <Cell>{stockList[i].symbol}</Cell>\r\n                    <Cell>{unitValue} {portfolio.currency}</Cell>\r\n                    <Cell>{stockList[i].amount}</Cell>\r\n                    <Cell>{totalValue} {portfolio.currency}</Cell>\r\n                    <Cell><input type=\"radio\" name={\"selection\" + portfolio.id} checked={portfolio.selected === i} readOnly={true}/></Cell>\r\n                </TableRow>\r\n            )\r\n        }\r\n\r\n        // The table body created above is then inserted in a table with a non-scrolling header with the field names\r\n        return (\r\n            <Table>\r\n                <TableHeader>\r\n                    <HeaderRow>\r\n                        <Cell>Name</Cell>\r\n                        <Cell>Unit value</Cell>\r\n                        <Cell>Quantity</Cell>\r\n                        <Cell>Total value</Cell>\r\n                        <Cell>Select</Cell>\r\n                    </HeaderRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                    {tableBodyData}\r\n                </TableBody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nclass BottomBar extends Component {\r\n    // The bottom bar contains the total value of the portfolio and buttons to manipulate and visualize the contents\r\n    // of the portfolio.\r\n\r\n    render() {\r\n        let currentPortfolio = this.props.currentPortfolio;\r\n\r\n        const BottomBar = styled.div`\r\n            height: auto;\r\n            max-width: 648;\r\n            min-width: 198;\r\n            border-top: 1px solid black;\r\n            background-color: #DDA;\r\n            padding: 8px 5px 15px 15px;\r\n            @media screen and (max-width: 1024px) {\r\n                display: table-cell;\r\n                height: auto;\r\n            }\r\n            @media screen and (max-width: 446px) {\r\n                    padding: 2px 5px 6px 5px;\r\n            }\r\n            @media screen and (max-width: 379px) {\r\n                padding-bottom: 4px;\r\n            }\r\n        `;\r\n\r\n        // CuttingText is used to let the text be cut off and replaced with \"...\" at the edge, so that the layout of\r\n        // the app doesn't break even att the narrowest widths.\r\n        const CuttingText = styled.div`\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n        `;\r\n\r\n        const LeftHalf = styled.div`\r\n            float: left;\r\n            width: 60%;\r\n            @media screen and (max-width: 446px) {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                width: 60%;\r\n            }\r\n        `;\r\n\r\n        const RightHalf = styled.div`\r\n            float: left;\r\n            width: 40%;\r\n            @media screen and (max-width: 446px) {\r\n                display: flex;\r\n                justify-content: flex-end;\r\n                width: 40%;\r\n            }\r\n        `;\r\n\r\n        const Button = styled.button`\r\n            min-width: 46px;\r\n            margin-top: 5px;\r\n            ${props => props.FloatRight ? \"float: right\" : null}\r\n            @media screen and (max-width: 446px) {\r\n                float: none;\r\n                margin-top: 2px;\r\n                margin-right: 0;\r\n                margin-left: 0px;\r\n            }\r\n        `;\r\n\r\n        return(\r\n            <BottomBar>\r\n                <CuttingText>\r\n                    Total value of portfolio : {currentPortfolio.getCurrentRate(currentPortfolio.value)} {currentPortfolio.currency}\r\n                </CuttingText>\r\n                <LeftHalf>\r\n                    <Button onClick={this.props.addStock}>Add stock</Button>\r\n                    <Button onClick={this.props.createGraph}>Performance graph</Button>\r\n                </LeftHalf>\r\n                <RightHalf>\r\n                    <Button FloatRight onClick={this.props.removeStock}>Remove selected</Button>\r\n                </RightHalf>\r\n            </BottomBar>\r\n        )\r\n    }\r\n}\r\n\r\nclass Switch extends Component {\r\n    /*  A switch that flips when clicked. Basically just a normal button that is styled to look like an oval switch. The\r\n     * state of the switch is displayed with different colored borders that take up approximately half of the switch on each\r\n     * side.\r\n     *\r\n     * This file contains all styling and logic that is needed for the switch itself, and thus the component is easily\r\n     * reused.\r\n     *\r\n     * The component takes the following props:\r\n     * - labelOff: label displayed for the off-state of the switch.\r\n     * - labelOn: label displayed for the on-state of the switch.\r\n     * - onChange: action to take when the switch id flipped (ie. the button is pressed).\r\n     * - on: boolean value that is passed to the constructor to set the initial state of the switch\r\n     *\r\n     * - saveState: the saveState of the app root which forces update of the DOM. Specific for this project, can be\r\n     * removed when the switch is used in other projects.\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            on: this.props.on,\r\n        }\r\n    }\r\n\r\n    flip() {\r\n        this.setState({on: !this.state.on});\r\n        this.props.onChange();\r\n        this.props.saveState();\r\n    }\r\n\r\n    render() {\r\n        let rot = 180 * this.state.on;\r\n\r\n        const SwitchContainer = styled.div`\r\n            display: flex;\r\n            flex-direction: row;\r\n            justify-content: flex-end;\r\n            align-items: center;\r\n            flex-grow: 2;\r\n        `;\r\n\r\n        const Switch = styled.button`\r\n            height: 15px;\r\n            width: 30px;\r\n            border: 0;\r\n            padding: 0;\r\n            margin: 5px;\r\n            border-right: 15px solid #D00;\r\n            outline: none;\r\n            border-radius: 10px;\r\n            background-color: #BBB;\r\n            transform: rotate(${rot}deg);\r\n        `;\r\n        return (\r\n            <SwitchContainer>\r\n                {this.props.labelOff}\r\n                <Switch onClick={this.flip.bind(this)}/>\r\n                {this.props.labelOn}\r\n            </SwitchContainer>\r\n        );\r\n    }\r\n}","import Currency from \"./Currency\";\r\n\r\nexport default class Portfolio {\r\n    /* A class that holds all information about a portfolio together with methods needed to manipulate it. */\r\n    constructor(id, name) {\r\n        this.id = id;\r\n        this.name = (name !== (undefined || \"\") ? name : \"Portfolio #\" + id);\r\n        this.entries = [];\r\n        this.selected = '';\r\n        this.value = 0;\r\n        this.currency = \"EUR\";\r\n        this.addStock = this.addStock.bind(this);\r\n        this.removeStock = this.removeStock.bind(this);\r\n    }\r\n\r\n    addStock(...args) {\r\n        /*  This method can take one or two arguments. The first argument is always a StockEntry-object.\r\n        *   If only one argument is given, the StockEntry is added to the end of the array with entries in the portfolio.\r\n        *   If two arguments are given, the StockEntry is treated as an addition to an existing entry, and the second argument\r\n        *   must be the index of the entry that shall be updated.\r\n        */\r\n        var entry = args[0];\r\n        switch (args.length) {\r\n            case 1:\r\n                var index = this.entries.length;\r\n                var toRemove = 0;\r\n                break;\r\n            case 2:\r\n                index = args[1];\r\n                toRemove = 1;\r\n                entry.amount = parseInt(entry.amount) + parseInt(this.entries[index].amount);\r\n                entry.totalValue = entry.getTotalValue();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        this.entries.splice(index, toRemove, args[0]);\r\n        this.calculateValue();\r\n    }\r\n\r\n    getValue() {\r\n        return (this.currency === \"USD\") ? this.value : Currency.DtoE(this.value);\r\n    }\r\n\r\n    changeCurrency() {\r\n        // Method to change the currency that the portfolio is viewed in\r\n        this.currency = (this.currency === \"EUR\") ? \"USD\" : \"EUR\";\r\n    }\r\n\r\n    getCurrentRate(value = 1) {\r\n        // Method to calculate the value to be displayed on screen and to round it to two decimal places\r\n        let toReturn = parseFloat((this.currency === \"USD\") ? value : Currency.DtoE(value));\r\n        return toReturn.toFixed(2);\r\n    }\r\n\r\n    getCurrentValue(stock) {\r\n        // Method that fetches the value (if found) for a given stock from the persistent local storage\r\n        if (stock.symbol in localStorage) {\r\n            stock.setValue(JSON.parse(localStorage.getItem(stock.symbol))[\"value\"]);\r\n            this.calculateValue();\r\n        }\r\n        var toReturn = parseFloat((this.currency === \"USD\") ? stock.value : Currency.DtoE(stock.value));\r\n        return toReturn.toFixed(2);\r\n    }\r\n\r\n    removeStock(index, amount) {\r\n        // Method to remove shares from a stock entry and calculate the new value for the entire portfolio\r\n        if(index === undefined || amount === null) return;\r\n        let entry = this.entries[index];\r\n        if (entry === (undefined || null)) return;\r\n        if (amount > entry.amount) {\r\n            // eslint-disable-next-line\r\n            let removeAll = confirm(\"You are trying to remove more shares than there are in the selected stock. Do you want to remove all \" + entry.amount + \" shares and delete the entry?\");\r\n            if (removeAll) {\r\n                amount = entry.amount;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (entry.amount === amount) {\r\n            this.value -= entry.totalValue;\r\n            this.entries.splice(index, 1);\r\n            this.selected = '';\r\n            return;\r\n        }\r\n        entry.amount -= amount;\r\n        entry.totalValue = entry.value * entry.amount;\r\n        this.value -= entry.value * amount;\r\n    }\r\n\r\n    calculateValue() {\r\n        // Method to update the total value of the portfolio.\r\n        var newValue = 0;\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            newValue += parseFloat(this.entries[i].getTotalValue());\r\n        }\r\n        this.value = newValue;\r\n    }\r\n}","/*\r\n    This class renders the root of the main app and contains some of the application-wide logic.\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TopBar from \"./TopBar\";\r\nimport PortfolioView from \"./PortfolioView\";\r\nimport Portfolio from \"./Portfolio\";\r\nimport StockEntry from \"./StockEntry\";\r\nimport StockServerData from \"./StockServerData\";\r\n\r\nexport default class App extends Component {\r\n    portfolios = [];\r\n    counter = 0;\r\n\r\n    constructor() {\r\n        /* When the page is (re-)loaded, the constructor checks the persistent local storage on the client machine\r\n         * for stored portfolios and loads them into the app. The currency exchange rate is updated automatically at\r\n         * this point, but stock values are not (so that usage quotas for unpaid AlphaVantage accounts will last longer).\r\n         * A counter is set up for quick assignment of unique id's to portfolios and DOM elements. */\r\n        super();\r\n        this.updateForex();\r\n        if (\"portfolios\" in localStorage) {\r\n            let savedPortfolios = JSON.parse(localStorage.getItem(\"portfolios\"));\r\n            for (let i = 0; i < savedPortfolios.length; i++) {\r\n                let p = savedPortfolios[i];\r\n                if (p === null) continue;\r\n                let toPush = new Portfolio(p.id, p.name);\r\n                for(let j = 0; j < p.entries.length; j++) {\r\n                    var tempStock = p.entries[j]\r\n                    toPush.addStock(new StockEntry(tempStock.symbol, tempStock.value, tempStock.amount, tempStock.updated));\r\n                }\r\n                toPush.selected = p.selected;\r\n                toPush.currency = p.currency;\r\n                this.portfolios.push(toPush);\r\n                if (this.counter < p.id) this.counter = p.id;\r\n            }\r\n            this.counter += 1;\r\n        }\r\n    }\r\n\r\n    saveState() {\r\n        /* Method to save the current state of the portfolios. The class' setState is called so that any changes in\r\n        * DOM-elements will be rendered on the page. This method should be called after all changes in the child nodes,\r\n        * especially changes to portfolios, to ensure that the persistent local storage and the displayed data in the app\r\n        * is up to date. */\r\n        localStorage.setItem(\"portfolios\", JSON.stringify(this.portfolios));\r\n        this.setState({});\r\n    }\r\n\r\n    addPortfolio() {\r\n        /* Method to add a new portfolio. There can be a maximum of 50 active portfolios. */\r\n        if (this.portfolios.length >= 10) {\r\n            alert(\"The maximum number of portfolios has been reached.\\nPlease delete an existing portfolio before creating a new one.\");\r\n            return;\r\n        }\r\n        /* The user id prompted for a name for the portfolio. Empty strings and duplicate names are allowed, but if the\r\n         * user presses the cancel-button no portfolio is created. */\r\n        let name = prompt(\"Please enter a name for the new portfolio.\");\r\n        if (name == undefined) return;\r\n        this.portfolios.push(new Portfolio(this.counter, name));\r\n\r\n        /* Update counter and save portfolios to local storage */\r\n        this.counter += 1;\r\n        this.saveState();\r\n    }\r\n\r\n    updateValues() {\r\n        /* Method that initiates updating of stock values and value of the portfolio. This is done asynchronously so\r\n        * that the user can continue working even if the update happens to take a long time. */\r\n        this.portfolios.forEach(async portfolio => {\r\n            /* If the server has returned a message about exceeded calls within the last 61 seconds, notify the user once\r\n            * and don't send new requests to the server. */\r\n            if (\"requestLimit\" in sessionStorage && sessionStorage.getItem(\"requestLimit\") > Date.now() - 61000) {\r\n                alert(\"The maximum number of requests per minute has been reached, please wait a moment and try again.\");\r\n                return;\r\n            }\r\n            let newValue = 0;\r\n            for (let i = 0; i < portfolio.entries.length; i++) {\r\n                let result = await StockServerData.getCurrentStockValue(this, portfolio.entries[i].symbol);\r\n                if (result !== 200) {\r\n                    /* Notify the user if something went wrong (except for exceeded request numbers, which are handled\r\n                    elsewhere.) */\r\n                    alert(\"Status \" + result + \": Could not fetch all stock values, please try again later.\");\r\n                    return result;\r\n                }\r\n                newValue += portfolio.entries[i].totalValue;\r\n            }\r\n            /* Update portfolio value and DOM after each successful server request */\r\n            portfolio.value = newValue;\r\n            this.saveState();\r\n        });\r\n    }\r\n\r\n    updateForex() {\r\n        /* Method to initiate updating of the currency exchange rate */\r\n        StockServerData.getCurrentForex(this);\r\n    }\r\n\r\n    render() {\r\n        /*  Rendering of the app; \"TopBar\" is the global menu and \"PortfolioView\" renders the portfolios. */\r\n        const AppMainDiv = styled.div`\r\n            width: 100%;\r\n            margin-top: 30px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n        `;\r\n\r\n        return (\r\n            <AppMainDiv>\r\n                <TopBar caller={this}/>\r\n                <PortfolioView portfolios={this.portfolios} saveState={this.saveState.bind(this)} />\r\n            </AppMainDiv>\r\n        );\r\n    }\r\n}","/*\n    This file renders the root elements of the app, which are three distinct layers. \"App\" is the main part of\n    the application, \"BusyOverlay\" is a layer that grays out the main app and shows a rotating gear during tasks\n    that prevent using the app (ie. time consuming server requests), and \"PerformanceGraph\" is a layer that grays\n    out the main app and presents the user with the historical data of a selected stock.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Styles.css\";\nimport App from \"./App\";\nimport BusyOverlay from \"./BusyOverlay\";\nimport PerformanceGraph from \"./PerformanceGraph\";\n\nlet components = [<App />,<BusyOverlay />, <PerformanceGraph/>];\nReactDOM.render(components, document.getElementById(\"root\"));\n"],"sourceRoot":""}